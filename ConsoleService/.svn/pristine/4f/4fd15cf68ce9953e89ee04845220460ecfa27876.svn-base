using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data.SqlClient;
using MallHost.Service;
using MallHostService;
using System.Data;
using System.Xml;
using System.Configuration;

namespace MallHost.Data
{
    /// <summary>
    /// 数据对象
    /// </summary>
    class DataBase : IDataBase
    {
        #region 更新endoscopeCleanTemp记录
        /// <summary>
        /// 更新endoscopeCleanTemp记录
        /// </summary>
        /// <param name="time">清洗时间（开始或结束时间）</param>
        /// <param name="endoscopeSN">内镜编号</param>
        /// <param name="step">清洗工序</param>
        /// <returns>
        /// 更新结果（true 表示更新成功，false表示更新失败）
        /// </returns>
        public bool RecordCleanTime(string time, string endoscopeSN, string step)
        {
            bool result = false;
            var updatesql = "update EndoscopeTemp set @step=@time where endoscopeSN=@endoSn";

            SqlParameter[] paras = 
            {
                 this.GetSqlParameter("@step", step, DbType.String),
                 this.GetSqlParameter("@time",time ,DbType.String),
                 this.GetSqlParameter("@endoSn",endoscopeSN ,DbType.String)
            };

            int temp = SqlHelper.ExecuteNonQuery(Global.ConnStr, CommandType.Text, updatesql, paras);

            if (temp > 0) result = true;
            return result;
        }
        #endregion

        #region Get endoscope information by SIM
        /// <summary>
        /// 根据SIM获取相关信息
        /// </summary>
        /// <param name="endoscopeSim">内镜卡号</param>
        /// <param name="tablename">表名</param>
        /// <returns>
        /// 内镜详细信息
        /// </returns>
        public EndoscopeInfo GetEndoscopeMsgBySIM(string endoscopeSim, string tablename)
        {
            EndoscopeInfo endoscope = null;
            var selectsql = "select * from EndoscopeInfo where endoscopeSIM=@endosope";

            SqlParameter[] paras = 
            {
                this.GetSqlParameter("@endoscope",endoscopeSim,DbType.String)
            };

            // reader读取内镜卡号
            using (var reader = SqlHelper.ExecuteReader(Global.ConnStr, CommandType.Text, selectsql, paras))
            {
                if (reader == null || !reader.HasRows)
                {
                    return endoscope;
                }

                while (reader.Read())
                {
                    endoscope = new EndoscopeInfo { EndoscopeSN = reader.SafeRead("endoscopeSN") };
                }
            }

            return endoscope;
        }
        #endregion

        #region  Get user information by SIM
        /// <summary>
        /// 根据SIM获取用户
        /// </summary>
        /// <param name="userSIM">用户卡号</param>
        /// <param name="table">The table.</param>
        /// <returns>
        /// 用户信息
        /// </returns>
        public UserInfo GetUserInfo(string userSim, string table)
        {
            UserInfo userinfo = null;
            var tempstr = "select * from userInfo where userSIM=@userSim";
            SqlParameter[] paras =
            {
                this.GetSqlParameter("@userSim",userSim,DbType.String)
            };

            using (SqlDataReader reader = SqlHelper.ExecuteReader(Global.ConnStr, CommandType.Text, "", paras))
            {
                if (reader == null || !reader.HasRows)
                {
                    return null;
                }

                while (reader.Read())
                {
                    userinfo = new UserInfo
                    {
                        UserSN = reader.SafeRead("userSN"),
                        UserName = reader.SafeRead("userName")
                    };
                }
            }

            return userinfo;
        }
        #endregion

        #region Reset endoscope information
        /// <summary>
        /// 重置内镜信息
        /// </summary>
        /// <param name="endoscopeSn">内镜编号</param>
        /// <param name="endoscopeSim">内镜卡号</param>
        /// <param name="washerNo">清洗工编号</param>
        /// <param name="washerRealName">清洗工名</param>
        /// <param name="cleanType">清洗类型</param>
        /// <param name="washDate">清洗日期</param>
        /// <param name="disinfection">消毒液</param>
        /// <param name="autoClean">自动清洗机编号</param>
        /// <returns>
        /// 重置结果
        /// </returns>
        public bool ResetEndoscope(string endoscopeSn, string endoscopeSim, string washerNo, string washerRealName, string cleanType, string washDate, string disinfection, string autoClean)
        {
            SqlConnection connection = null;
            var deletesql = "delete from where endoscopeSN=@endoscopeSn";
            SqlParameter[] deleteparas =
            {
                this.GetSqlParameter("@endoscopeSn",endoscopeSn,DbType.String)
            };

            using (connection = new SqlConnection(Global.ConnStr))
            {
                SqlTransaction tran = connection.BeginTransaction();
                int result = SqlHelper.ExecuteNonQuery(tran, CommandType.Text, deletesql, deleteparas);

                if (result <= 0)
                {
                    tran.Rollback();
                }

                try
                {
                    var insertsql = @"insert into EndoscopeTemp (endoscopeSN,endoscopeSIM,washerNo,washerRealName,cleanType,disinfection,washDate,autoCleanNo)
                                    values(@endoscopeSn,@endoscopeSim,@washerNo,@washerRealName,@cleanType,@disinfection,@washDate,@autoClaen)";
                    SqlParameter[] insertparas =
                    {
                        this.GetSqlParameter("@endoscopeSn",endoscopeSn,DbType.String),
                        this.GetSqlParameter("@endoscopeSim",endoscopeSim,DbType.String),
                        this.GetSqlParameter("@washerNo",washerNo,DbType.String),
                        this.GetSqlParameter("@washerRealName",washerRealName,DbType.String),
                        this.GetSqlParameter("@cleanType",cleanType,DbType.String),
                        this.GetSqlParameter("@disinfection",disinfection,DbType.String),
                        this.GetSqlParameter("@washDate",washDate,DbType.DateTime),
                        this.GetSqlParameter("@autoClean",autoClean,DbType.String)
                    };

                    result = SqlHelper.ExecuteNonQuery(tran, CommandType.Text, insertsql, insertparas);

                    if (result > 0)
                    {
                        tran.Commit();
                        return true;
                    }
                }
                catch (Exception ex)
                {
                    Global.Log(ex.Message);
                    tran.Rollback();
                }
            }

            return false;
        }
        #endregion

        #region Get endoscope information  by  endoscpoeSN
        /// <summary>
        /// 获得内镜信息
        /// </summary>
        /// <param name="endoscopeSn">内镜编号</param>
        /// <returns>
        /// 内镜信息
        /// </returns>
        public EndoscopeCleanTemp GetNewCleanMsg(string endoscopeSn)
        {
            var endoscopeclean = new EndoscopeCleanTemp();
            SqlConnection connection = null;
            var selectsql = "select * from endoscopeTemp where endoscopeSN=@endoscopeSn";
            SqlParameter[] paras =
            {
                 this.GetSqlParameter("@endoscopeSn",endoscopeSn,DbType.String)
            };

            using (SqlDataReader reader = SqlHelper.ExecuteReader(Global.ConnStr, CommandType.Text, selectsql, paras))
            {
                if (!reader.HasRows)
                {
                    return endoscopeclean;
                }

                while (reader.Read())
                {
                    endoscopeclean = new EndoscopeCleanTemp
                    {
                        EndoscopeSN = reader.SafeRead("endoscopeSN"),
                        EndoscopeSIM = reader.SafeRead("endoscopeSIM"),
                        CleanType = reader.SafeRead("cleanType"),
                        WasherNo = reader.SafeRead("washNo"),
                        WasherRealName = reader.SafeRead("washerRealName"),
                        AutoCleanNo = reader.SafeRead("autoCleanNo")
                    };

                    var time = new DateTime();
                    DateTime.TryParse(reader.SafeRead("washDate"), out time);
                    endoscopeclean.WashDate = time.ToLongDateString();

                    if (string.Equals(endoscopeclean.CleanType, "1"))
                    {
                        endoscopeclean.BrushWashBegin = reader.SafeRead("brushWashBegin");
                        endoscopeclean.BrushWashEnd = reader.SafeRead("brushWashEnd");
                        endoscopeclean.FirstWashBegin = reader.SafeRead("firstWashBegin");
                        endoscopeclean.FirstWashEnd = reader.SafeRead("firstWashEnd");
                        endoscopeclean.EnzymeWashBegin = reader.SafeRead("enzymeWashBegin");
                        endoscopeclean.EnzymeWashEnd = reader.SafeRead("enzymeWashEnd");
                        endoscopeclean.CleanOutBegin = reader.SafeRead("cleanOutWashBegin");
                        endoscopeclean.CleanOutEnd = reader.SafeRead("cleanOutWashEnd");
                        endoscopeclean.DipInBegin = reader.SafeRead("dipInWashBegin");
                        endoscopeclean.DipInEnd = reader.SafeRead("dipInwashEnd");
                        endoscopeclean.LastWashBegin = reader.SafeRead("lastWashBegin");
                        endoscopeclean.LastWashEnd = reader.SafeRead("lastWashEnd");
                    }

                    if (string.Equals(endoscopeclean.CleanType, "2"))
                    {
                        endoscopeclean.DipInSecBegin = reader.SafeRead("dipInWashSecBegin");
                        endoscopeclean.DipInSecEnd = reader.SafeRead("dipInWashSecEnd");
                        endoscopeclean.LastWashSecBegin = reader.SafeRead("lastWashSecBegin");
                        endoscopeclean.LastWashSecEnd = reader.SafeRead("lastWashSecEnd");
                    }
                }
            }

            return endoscopeclean;
        }
        #endregion

        #region Update temp record data
        /// <summary>
        /// 确定清洗信息
        /// </summary>
        /// <param name="table">表名</param>
        /// <param name="endoscopeSn">内镜编号</param>
        /// <param name="totalTime">清洗时间</param>
        /// <param name="recordTime">记录时间</param>
        /// <returns>
        /// 是否确认成功
        /// </returns>
        public bool UpdateTempRecord(string table, string endoscopeSn, string totalTime, string recordTime)
        {
            var updatesql = "update endoscopeTemp set washTotalTime=@totalTime where endoscopeSN=@endoSn";
            SqlParameter[] paras =
            {
                 this.GetSqlParameter("@totalTime",totalTime,DbType.String),
                 this.GetSqlParameter("@endoSn",endoscopeSn,DbType.String),
                 this.GetSqlParameter("@endoSn",endoscopeSn,DbType.String)
            };

            int result = SqlHelper.ExecuteNonQuery(Global.ConnStr, CommandType.Text, updatesql, paras);

            if (result > 0)
            {
                return true;
            }

            return false;
        }
        #endregion

        #region  Insert trace data records
        /// <summary>
        /// 将临时记录写入终表
        /// </summary>
        /// <param name="tableName">表名</param>
        /// <param name="endocscopeSn">内镜编号</param>
        /// <returns>
        /// 写入是否成功
        /// </returns>
        public bool RecordTraceData(string tableName, string endocscopeSn, string recordTime)
        {
            EndoscopeCleanTemp endoTemp = null;
            SqlTransaction tran;
            var selectsql = string.Format("select * from endoscopeRecord where recordTime='{0}'", recordTime);
            object tempobj = SqlHelper.ExecuteScalar(Global.ConnStr, CommandType.Text, selectsql);

            if (tempobj != null)
            {
                return false;
            }
            selectsql = string.Format("select * from endoscopeTemp where endoscopeSN='{0}'", endocscopeSn);

            using (SqlDataReader reader = SqlHelper.ExecuteReader(Global.ConnStr, CommandType.Text, selectsql))
            {
                if (!reader.HasRows)
                {
                    return false;
                }
                while (reader.Read())
                {
                    endoTemp = new EndoscopeCleanTemp();
                    endoTemp.EndoscopeSN = reader.SafeRead("endoscopeSN");
                    endoTemp.EndoscopeSN = reader.SafeRead("endoscopeSIM");
                    endoTemp.RecordTime = reader.SafeRead("recordTime");
                    endoTemp.BrushWashBegin = reader.SafeRead("brushWashBegin");
                    endoTemp.BrushWashEnd = reader.SafeRead("brushWashEnd");
                    endoTemp.FirstWashBegin = reader.SafeRead("firstWashBegin");
                    endoTemp.FirstWashEnd = reader.SafeRead("firstWashEnd");
                    endoTemp.EnzymeWashBegin = reader.SafeRead("enzymeWashBegin");
                    endoTemp.EnzymeWashEnd = reader.SafeRead("enzymeWashEnd");
                    endoTemp.CleanOutBegin = reader.SafeRead("cleanOutWashBegin");
                    endoTemp.CleanOutEnd = reader.SafeRead("cleanOutWashEnd");
                    endoTemp.DipInBegin = reader.SafeRead("dipInWashBegin");
                    endoTemp.DipInEnd = reader.SafeRead("dipInwashEnd");
                    endoTemp.LastWashBegin = reader.SafeRead("lastWashBegin");
                    endoTemp.LastWashEnd = reader.SafeRead("lastWashEnd");
                    endoTemp.DipInSecBegin = reader.SafeRead("dipInWashSecBegin");
                    endoTemp.DipInSecEnd = reader.SafeRead("dipInWashSecEnd");
                    endoTemp.LastWashSecBegin = reader.SafeRead("lastWashSecBegin");
                    endoTemp.LastWashSecEnd = reader.SafeRead("lastWashSecEnd");
                    endoTemp.Quality = reader.SafeRead("qualified");
                    endoTemp.WasherNo = reader.SafeRead("washerNo");
                    endoTemp.WasherRealName = reader.SafeRead("washerRealName");
                    endoTemp.CleanType = reader.SafeRead("cleanType");
                    endoTemp.Disinfection = reader.SafeRead("disinfection");
                    endoTemp.WashDate = reader.SafeRead("washDate");
                    endoTemp.AutoCleanNo = reader.SafeRead("autoCleanNo");
                    //sets = "endoscopeSN,endoscopeSIM,qualified,washerNo,washerRealName,recordTime,cleanType,disinfection,washDate,washTotalTime,washBeginTime,washEndTime,autoCleanNo";
                }
            }

            using (var conn = new SqlConnection(Global.ConnStr))
            {
                tran = conn.BeginTransaction();
                var insertsql = @"insert into ednsocopeRecordInfo (
                                endoscopeSN,endoscopeSIM,recordTime,brushWashBegin,brushWashEnd,
                                firstWashBegin,firstWashEnd,enzymeWashBegin,enzymeWashEnd,cleanOutWashBegin,
                                cleanOutWashEnd,dipInWashBegin,dipInWashEnd,lastWashBegin,lastWashEnd,
                                dipInWashSecBegin,dipInWashSecEnd,lastWashSecBegin,lastWashSecEnd) 
                                values( @endoSn,@endoSim,@recordTime,@bruWashB,@bruWashE,
                                @firWashB,@firWashE,@enWashB,@enWashE,@cleanWashB,
                                @cleanWashE,@dipWashB,@dipWashE,@lastWashB,@lastWashE,
                                @dipWashSecB,@dipWashSecE,@lastWashSecB,@lastWashSecE)";
                SqlParameter[] paras =
                {
                   this.GetSqlParameter("@endoSn",endoTemp.EndoscopeSN,DbType.String),
                   this.GetSqlParameter("@endoSim",endoTemp.EndoscopeSIM,DbType.String),
                   this.GetSqlParameter("@recordTime",endoTemp.RecordTime,DbType.String),
                   this.GetSqlParameter("@bruWashB",endoTemp.BrushWashBegin,DbType.DateTime),
                   this.GetSqlParameter("@bruWashE",endoTemp.BrushWashEnd,DbType.DateTime),
                   this.GetSqlParameter("@firWashB",endoTemp.FirstWashBegin,DbType.DateTime),
                   this.GetSqlParameter("@firWashE",endoTemp.FirstWashEnd,DbType.DateTime),
                   this.GetSqlParameter("@enWashB",endoTemp.EnzymeWashBegin,DbType.DateTime),
                   this.GetSqlParameter("@enWashE",endoTemp.EnzymeWashEnd,DbType.DateTime),
                   this.GetSqlParameter("@cleanWashB",endoTemp.CleanOutBegin,DbType.DateTime),
                   this.GetSqlParameter("@cleanWashE",endoTemp.CleanOutEnd,DbType.DateTime),
                   this.GetSqlParameter("@dipWashB",endoTemp.DipInBegin,DbType.DateTime),
                   this.GetSqlParameter("@dipWashE",endoTemp.DipInEnd,DbType.DateTime),
                   this.GetSqlParameter("@lastWashB",endoTemp.LastWashBegin,DbType.DateTime),
                   this.GetSqlParameter("@lastWashE",endoTemp.LastWashEnd,DbType.DateTime),
                   this.GetSqlParameter("@dipWashSecB",endoTemp.DipInSecBegin,DbType.DateTime),
                   this.GetSqlParameter("@dipWashSecE",endoTemp.DipInSecEnd,DbType.DateTime),
                   this.GetSqlParameter("@lastWashSecB",endoTemp.LastWashSecBegin,DbType.DateTime),
                   this.GetSqlParameter("@lastWashSecE",endoTemp.LastWashSecEnd,DbType.DateTime)
                };

                // Insert record into RecordInfo with transaction
                int result = SqlHelper.ExecuteNonQuery(tran, CommandType.Text, insertsql, paras);

                // failed
                if (result <= 0)
                {
                    tran.Rollback();
                }

                selectsql = string.Format("select  MAX(recordInfoId),patientNo from endoscopeRecordInfo where endoscopeSN='{0}'", endoTemp.EndoscopeSN);

                string patientnum = string.Empty;
                int recordiinfoid = 0;

                using (var reader = SqlHelper.ExecuteReader(Global.ConnStr, CommandType.Text, selectsql))
                {
                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            patientnum = reader.SafeRead("patientNo");
                            recordiinfoid = reader.SafeRead<int>("recordInfoId");
                        }
                    }
                }

                insertsql = @"insert into endoscopeRecord (
                              endoscopeSN,endoscopeSIM,wahserNo,washerRealName,recordInfoId,recordTime,
                              cleanType,disinfection,washDate,washTotalTime,washBeginTime,washEndTime,
                              autoCleanNo,prePatientNo,qulitified) values(
                              @endoSn,@endoSim,@wahserNo,@washerName,@recordInfoId,@recordTime,@cleanType,
                              @disinfection,@washDate,@washTotalTime,@washBeginTime,@washEndTime,@autoCleanNo,
                              @prePatientNo,@qulitified)";
                SqlParameter[] insertparas =
                {
                   this.GetSqlParameter("@endoSn",endoTemp.EndoscopeSN,DbType.String),
                   this.GetSqlParameter("@endoSim",endoTemp.EndoscopeSIM,DbType.String),
                   this.GetSqlParameter("@wahserNo",endoTemp.WasherNo,DbType.String),
                   this.GetSqlParameter("@washerName",endoTemp.WasherRealName,DbType.String),
                   this.GetSqlParameter("@recordInfoId",recordiinfoid.ToString(),DbType.String),
                   this.GetSqlParameter("@recordTime",endoTemp.RecordTime,DbType.DateTime),
                   this.GetSqlParameter("@cleanType",endoTemp.CleanType,DbType.String),
                   this.GetSqlParameter("@disinfection",endoTemp.Disinfection,DbType.String),
                   this.GetSqlParameter("@washDate",endoTemp.WashDate,DbType.Date),
                   //this.GetSqlParameter("@washTotalTime",endoTemp,DbType.DateTime),
                   this.GetSqlParameter("@washBeginTime",endoTemp.CleanType=="1"?endoTemp.BrushWashBegin:endoTemp.DipInSecBegin,DbType.DateTime),
                   this.GetSqlParameter("@washEndTime",endoTemp.CleanType=="1"?endoTemp.LastWashEnd:endoTemp.LastWashSecEnd,DbType.DateTime),
                   this.GetSqlParameter("@autoCleanNo",endoTemp.AutoCleanNo,DbType.String),
                   this.GetSqlParameter("@prePatientNo",patientnum,DbType.String),
                   this.GetSqlParameter("@qulitified",endoTemp.Quality,DbType.String)
                };

                // insert into Record with transaction
                result = SqlHelper.ExecuteNonQuery(tran, CommandType.Text, insertsql, insertparas);

                if (result >= 0)
                {
                    tran.Commit();
                    return true;
                }

                tran.Rollback();
            }

            return false;
        }
        #endregion

        #region Is bind to a cleaner
        /// <summary>
        /// 是否绑定员工
        /// </summary>
        /// <param name="endoscopeSn">内镜编号</param>
        /// <returns>是否绑定</returns>
        public bool IsBindingWaher(string endoscopeSn)
        {
            var selectsql = string.Format("select washerNo from endoscopeTemp where endoscopeSN='{0}'", endoscopeSn);
            object temp = SqlHelper.ExecuteScalar(Global.ConnStr, CommandType.Text, selectsql);

            if (temp == null)
            {
                return false;
            }

            return true;
        }
        #endregion

        #region Is exist a data
        /// <summary>
        /// 是否存在具体的一条数据
        /// </summary>
        /// <param name="endoscopeSn">内镜编码</param>
        /// <param name="table">表名</param>
        /// <param name="col">列名</param>
        /// <returns>查找结果</returns>
        public bool IsExitOneColumn(string endoscopeSn, string tableName, string col)
        {
            var selectsql = string.Format("select {0} from {1} where endoscopeSN={2}", col, tableName, endoscopeSn);
            object temp = SqlHelper.ExecuteScalar(Global.ConnStr, CommandType.Text, selectsql);

            if (temp == null)
            {
                return false;
            }

            return true;
        }
        #endregion

        #region Connect to databases
        /// <summary>
        /// 连接数据库
        /// </summary>
        /// <returns>连接结果</returns>
        public static bool ConnectDataBase()
        {
            using (var connection = new SqlConnection(Global.ConnStr))
            {
                try
                {
                    connection.Open();
                    return true;
                }
                catch (Exception ex)
                {
                    Global.Log(ex);
                }
            }

            return false;
        }
        #endregion

        #region  Set cleanning qualified
        /// <summary>
        /// 设置清洗是否合格
        /// </summary>
        /// <param name="endoscopeSn">内镜编号</param>
        /// <param name="qulified">合格</param>
        /// <returns>设置结果</returns>
        public bool SetOneTable(string endoscopeSn, string qulified, string col)
        {
            var updatesql = string.Format("update endoscopeTemp set {0}='{1}' where endoscopeSN='{2}'", col, qulified, endoscopeSn);
            int result = SqlHelper.ExecuteNonQuery(Global.ConnStr, CommandType.Text, updatesql);

            if (result > 0)
            {
                return true;
            }

            return false;
        }
        #endregion

        #region Insert a endoscope information into table
        /// <summary>
        /// 插入内镜信息
        /// </summary>
        /// <param name="tableName">表名</param>
        /// <param name="endoscopeInfo">内镜信息</param>
        /// <returns>是否成功</returns>
        public bool ModifyEndoscope(string tableName, EndoscopeInfo endoscopeInfo)
        {
            var selectsql = string.Format("select endoscopeID from endoscopeInfo where endoscopeSN='{0}'", endoscopeInfo.EndoscopeSN);
            object temp = SqlHelper.ExecuteScalar(Global.ConnStr, CommandType.Text, selectsql);
            SqlParameter[] paras = 
            {
                this.GetSqlParameter("endoSn",endoscopeInfo.EndoscopeSN,DbType.String),
                this.GetSqlParameter("endoSim",endoscopeInfo.EndoscopeSIM,DbType.String),
                this.GetSqlParameter("endoType",endoscopeInfo.EndoscopeType,DbType.String),
                this.GetSqlParameter("endoTypeName",endoscopeInfo.EndoscopeTypeName,DbType.String),
                this.GetSqlParameter("endoSerYear",endoscopeInfo.EndoscopeServiceYear,DbType.String),
                this.GetSqlParameter("endoUseTime",endoscopeInfo.EndoscopeUseTime,DbType.DateTime),
                this.GetSqlParameter("endoSeal",endoscopeInfo.EndoscopeSeal,DbType.String),
                this.GetSqlParameter("remark",endoscopeInfo.Remark,DbType.String)
            };

            using (var conn = new SqlConnection(Global.ConnStr))
            {
                var tran = conn.BeginTransaction();
                if (temp == null)
                {
                    var insertsql = @"insert into endoscopeInfo (
                                    endoscopeSN,endoscopeSIM,endoscopeType,endoscopeTypeName,endoscopeServiceYear
                                    endoscopeUseTime,endoscopeSeal,remark) values(
                                    @endoSn,@endoSim,@endoType,@endoTypeName,@endoSerYear,@endoUseTime,@endoSeal,@remark)";



                    int result = SqlHelper.ExecuteNonQuery(tran, CommandType.Text, insertsql, paras);

                    if (result <= 0)
                    {
                        tran.Rollback();
                    }

                    insertsql = string.Format("insert into endoscopeTemp (endoscopeSN,endoscopeSIM,cleanTye) values('{0}','{1}','{2}')", endoscopeInfo.EndoscopeSN, endoscopeInfo.EndoscopeSIM, 1);
                    result = SqlHelper.ExecuteNonQuery(tran, CommandType.Text, insertsql);
                    if (result > 0)
                    {
                        tran.Commit();
                        return true;
                    }

                    tran.Rollback();

                }
                else
                {
                    var updatesql = string.Format(@"update endoscopeIno set endoscopeSN=@endoSn,endoscopeSIM=@endoSim,endoscopeType=@endoType,
                                    endoscopeTypeName=@endoTypeName,endoscopeServiceYear=@endoSerYear,endoscopeUseTime=@endoUseTime,
                                    endoscopeSeal=@endoSeal,remark=@remark where endoscopeID='{0}'", endoscopeInfo.EndoscopeId);
                    int result = SqlHelper.ExecuteNonQuery(tran, CommandType.Text, updatesql, paras);

                    if (result > 0)
                    {
                        tran.Commit();
                        return true;
                    }

                    return false;
                }
            }

            return false;
        }
        #endregion

        #region Insert users into user table
        /// <summary>
        /// 插入用户
        /// </summary>
        /// <param name="tableName">表名</param>
        /// <param name="user">用户</param>
        /// <returns>是否成功</returns>
        public bool ModifyUser(string tableName, UserInfo user)
        {
            var selectsql = string.Format("select * from userInfo where userSN='{0}'", user.UserSN);
            object temp = SqlHelper.ExecuteScalar(Global.ConnStr, CommandType.Text, selectsql);
            SqlParameter[] paras =
            {
                    this.GetSqlParameter("@userSn",user.UserSN,DbType.String),
                    this.GetSqlParameter("@userSIM",user.UserSIM,DbType.String),
                    this.GetSqlParameter("@userPass",user.UserPass,DbType.String),
                    this.GetSqlParameter("@userName",user.UserName,DbType.String),
                    this.GetSqlParameter("@userRole",user.UserRole,DbType.String),
                    this.GetSqlParameter("@userType",user.UserType=="管理员"?"9":"1",DbType.String),
                    this.GetSqlParameter("@remark",user.Remark,DbType.String)
            };

            if (temp == null)
            {
                var insertsql = @"insert into userInfo (userSN,userSIM,userPass,userName,userTime,userRole,userType,remark)
                                value (@userSn,@userSim,@userPass,@userName,@userTime,@userRole,@userType,@remark)";
                int result = SqlHelper.ExecuteNonQuery(Global.ConnStr, CommandType.Text, insertsql, paras);

                if (result > 0)
                {
                    return true;
                }
            }
            else
            {
                var updateSql = string.Format(@"update userInfo set userSN=@userSn,userSIM=@userSim , userPass=@userPass,userName=@userName
                                    userTime=@userTime,userRole=@userRole,userType=@userType,remark=@remark where userId='{0}'", user.UserId);
                int result = SqlHelper.ExecuteNonQuery(Global.ConnStr, CommandType.Text, updateSql, paras);

                if (result > 0)
                {
                    return true;
                }
            }

            return false;
        }
        #endregion

        #region delete user
        /// <summary>
        /// 删除用户
        /// </summary>
        /// <param name="tableName">表名</param>
        /// <param name="condition">条件</param>
        /// <returns>执行结果</returns>
        public bool DeleteUser(string condition)
        {
            var deletesql = string.Format("delete from userInfo where userSN='{0}'", condition);
            int result = SqlHelper.ExecuteNonQuery(Global.ConnStr, CommandType.Text, deletesql);

            if (result > 0)
            {
                return true;
            }

            return false;
        }
        #endregion

        #region Delete endoscope
        /// <summary>
        /// 删除内镜
        /// </summary>
        /// <param name="condition">删除条件</param>
        /// <returns>删除结果</returns>
        public bool DeleteEndoscope(string condition)
        {
            var deletesqp = string.Format("delete from endoscopeInfo where endoscopeSN='{0}'", condition);
            using (var conn = new SqlConnection(Global.ConnStr))
            {
                var tran = conn.BeginTransaction();
                int result = SqlHelper.ExecuteNonQuery(tran, CommandType.Text, deletesqp);

                if (result <= 0)
                {
                    tran.Rollback();
                }

                deletesqp = string.Format("delete from endoscopeTemp where endoscopeSN='{0}'", condition);

                result = SqlHelper.ExecuteNonQuery(tran, CommandType.Text, deletesqp);

                if (result <= 1)
                {
                    tran.Rollback();
                }

                tran.Commit();
            }

            return true;
        }
        #endregion

        #region load user information
        /// <summary>
        /// 加载用户信息
        /// </summary>
        /// <returns>用户信息</returns>
        public List<UserInfo> LoadUsers()
        {
            var seletsql = "select * from userInfo";
            var userinfos = new List<UserInfo>();

            using (SqlDataReader reader = SqlHelper.ExecuteReader(Global.ConnStr, CommandType.Text, seletsql))
            {
                if (!reader.HasRows)
                {
                    return new List<UserInfo>();
                }

                while (reader.Read())
                {
                    var userInfo = new UserInfo
                    {
                        UserSN = reader.SafeRead("userSN"),
                        UserId = reader.SafeRead("userId"),
                        UserName = reader.SafeRead("userName"),
                        UserPass = reader.SafeRead("userPass"),
                        UserSIM = reader.SafeRead("userSIM"),
                        UserRole = reader.SafeRead("userRole"),
                        UserTime = reader.SafeRead("userTime"),
                        UserType = reader.SafeRead("userType"),
                        Remark = reader.SafeRead("remark")
                    };
                    userinfos.Add(userInfo);
                }
            }

            return userinfos;
        }
        #endregion

        #region  Load endoscope information
        /// <summary>
        /// 加载内镜信息
        /// </summary>
        /// <returns><内镜信息/returns>
        public List<EndoscopeInfo> LoadEndoscopes()
        {
            var selectsql = "select * from endoscopeInfo";
            var endoscopes = new List<EndoscopeInfo>();

            using (SqlDataReader reader = SqlHelper.ExecuteReader(Global.ConnStr, CommandType.Text, selectsql))
            {
                if (!reader.HasRows)
                {
                    return new List<EndoscopeInfo>();
                }

                while (reader.Read())
                {
                    var endoscopeInfo = new EndoscopeInfo
                    {
                        EndoscopeSN = reader.SafeRead("endoscopeSN"),
                        EndoscopeId = reader.SafeRead("endoscopeID"),
                        EndoscopeSIM = reader.SafeRead("endoscopeSIM"),
                        EndoscopeSeal = reader.SafeRead("endoscopeSeal"),
                        EndoscopeServiceYear = reader.SafeRead("endoscopeServiceYear"),
                        EndoscopeType = reader.SafeRead("endoscopeType"),
                        EndoscopeTypeName = reader.SafeRead("endoscopeTypeName"),
                        EndoscopeUseTime = reader.SafeRead("endoscopeUseTime"),
                        Remark = reader.SafeRead("remark")
                    };

                    endoscopes.Add(endoscopeInfo);
                }
            }

            return endoscopes;
        }
        #endregion

        #region Trace the cleanning  data
        /// <summary>
        /// 查询追溯结果
        /// </summary>
        /// <returns>XML结果</returns>
        public string SearchResult(string sql)
        {
            string tempStr = string.Empty;
            SqlConnection con = null;
            DataSet dataSet = new DataSet();
            using (con = new SqlConnection(Global.ConnStr))
            {
                try
                {

                    con.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.CommandText = sql;
                    cmd.Connection = con;
                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dataSet);
                    tempStr = dataSet.GetXml();
                }
                catch (Exception ex)
                {
                    Global.Log(ex);
                }
            }
            return tempStr;
        }
        #endregion

        #region First clean
        /// <summary>
        /// 一次清洗
        /// </summary>
        /// <returns>一次清洗结果</returns>
        public string SearchFirstWash(string beginTime, string endTime)
        {
            SqlConnection con = null;
            DataTable dataTable = null;
            DataSet set = null;
            using (con = new SqlConnection(Global.ConnStr))
            {
                try
                {

                    con.Open();
                    var cmd = new SqlCommand();
                    dataTable = CreateNewDataTable("1");
                    cmd.Connection = con;
                    cmd.CommandText = SQL.FirstWash(beginTime, endTime);
                    set = new DataSet();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            try
                            {
                                DataRow row = dataTable.NewRow();
                                row[0] = Convert.IsDBNull(reader["endoscopeSN"]) == true ? "" : reader["endoscopeSN"].ToString();
                                row[1] = Convert.IsDBNull(reader["washerRealName"]) == true ? "" : reader["washerRealName"].ToString();
                                row[2] = Convert.IsDBNull(reader["washDate"]) == true ? "" : Convert.ToDateTime(reader["washDate"].ToString()).ToLongDateString();
                                row[3] = Convert.IsDBNull(reader["washTotalTime"]) == true ? "" : reader["washTotalTime"].ToString();
                                row[4] = Convert.IsDBNull(reader["washBeginTime"]) == true ? "" : reader["washBeginTime"].ToString();
                                row[5] = Convert.IsDBNull(reader["washEndTime"]) == true ? "" : reader["washEndTime"].ToString();
                                row[6] = Convert.IsDBNull(reader["autoCleanNo"]) == true ? "" : reader["autoCleanNo"].ToString();
                                row[7] = Convert.IsDBNull(reader["brushWashBegin"]) == true ? "" : VerifyData(reader["brushWashEnd"].ToString(), reader["brushWashBegin"].ToString());
                                row[8] = Convert.IsDBNull(reader["firstWashEnd"]) == true ? "" : VerifyData(reader["firstWashEnd"].ToString(), reader["firstWashBegin"].ToString());
                                row[9] = Convert.IsDBNull(reader["enzymeWashEnd"]) == true ? "" : VerifyData(reader["enzymeWashEnd"].ToString(), reader["enzymeWashBegin"].ToString());
                                row[10] = Convert.IsDBNull(reader["cleanOutWashEnd"]) == true ? "" : VerifyData(reader["cleanOutWashEnd"].ToString(), reader["cleanOutWashBegin"].ToString());
                                row[11] = Convert.IsDBNull(reader["dipInWashEnd"]) == true ? "" : VerifyData(reader["dipInWashEnd"].ToString(), reader["dipInWashBegin"].ToString());
                                row[12] = Convert.IsDBNull(reader["lastWashEnd"]) == true ? "" : VerifyData(reader["lastWashEnd"].ToString(), reader["lastWashBegin"].ToString());
                                row[13] = Convert.IsDBNull(reader["wareNo"]) == true ? "" : reader["wareNo"].ToString();
                                row[14] = Convert.IsDBNull(reader["doctorName"]) == true ? "" : reader["doctorName"].ToString();
                                row[15] = Convert.IsDBNull(reader["patientNo"]) == true ? "" : reader["patientNo"].ToString();
                                row[16] = Convert.IsDBNull(reader["prePatientNo"]) == true ? "" : reader["prePatientNo"].ToString();
                                row[17] = Convert.IsDBNull(reader["qualified"]) == true ? "" : reader["qualified"].ToString();
                                row[18] = Convert.IsDBNull(reader["nurseNo"]) == true ? "" : reader["nurseNo"].ToString();
                                dataTable.Rows.Add(row);
                            }
                            catch (Exception ex)
                            {
                                Global.Log(ex);
                            }
                        }
                    }
                }

                catch (Exception ex)
                {
                    Global.Log(ex);
                }
            }
            set.Tables.Add(dataTable);
            return set.GetXml();
        }
        #endregion

        #region Second clean
        /// <summary>
        /// 二次清洗
        /// </summary>
        /// <returns>二次清洗结果</returns>
        public string SearchSecondWash(string beginTime, string endTime)
        {
            SqlConnection con = null;
            DataTable dataTable = null;
            DataSet set = null;
            using (con = new SqlConnection(Global.ConnStr))
            {
                try
                {

                    con.Open();
                    SqlCommand cmd = new SqlCommand();
                    dataTable = CreateNewDataTable("2");
                    cmd.Connection = con;
                    cmd.CommandText = SQL.SecondWash(beginTime, endTime);
                    set = new DataSet();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            try
                            {
                                DataRow row = dataTable.NewRow();
                                row[0] = Convert.IsDBNull(reader["endoscopeSN"]) == true ? "" : reader["endoscopeSN"].ToString();
                                row[1] = Convert.IsDBNull(reader["washerRealName"]) == true ? "" : reader["washerRealName"].ToString();
                                row[2] = Convert.IsDBNull(reader["washDate"]) == true ? "" : Convert.ToDateTime(reader["washDate"].ToString()).ToLongDateString();
                                row[3] = Convert.IsDBNull(reader["washTotalTime"]) == true ? "" : reader["washTotalTime"].ToString();
                                row[4] = Convert.IsDBNull(reader["washBeginTime"]) == true ? "" : reader["washBeginTime"].ToString();
                                row[5] = Convert.IsDBNull(reader["washEndTime"]) == true ? "" : reader["washEndTime"].ToString();
                                row[6] = Convert.IsDBNull(reader["autoCleanNo"]) == true ? "" : reader["autoCleanNo"].ToString();
                                row[7] = Convert.IsDBNull(reader["dipInWashSecEnd"]) == true ? "" : VerifyData(reader["dipInWashSecEnd"].ToString(), reader["dipInWashSecBegin"].ToString());
                                row[8] = Convert.IsDBNull(reader["lastWashSecEnd"]) == true ? "" : VerifyData(reader["lastWashSecEnd"].ToString(), reader["lastWashSecBegin"].ToString());
                                row[9] = Convert.IsDBNull(reader["wareNo"]) == true ? "" : reader["wareNo"].ToString();
                                row[10] = Convert.IsDBNull(reader["doctorName"]) == true ? "" : reader["doctorName"].ToString();
                                row[11] = Convert.IsDBNull(reader["patientNo"]) == true ? "" : reader["patientNo"].ToString();
                                row[12] = Convert.IsDBNull(reader["prePatientNo"]) == true ? "" : reader["prePatientNo"].ToString();
                                row[13] = Convert.IsDBNull(reader["qualified"]) == true ? "" : reader["qualified"].ToString();
                                row[14] = Convert.IsDBNull(reader["nurseNo"]) == true ? "" : reader["nurseNo"].ToString();
                                dataTable.Rows.Add(row);
                            }
                            catch (Exception ex)
                            {
                                Global.Log(ex);
                            }
                        }
                    }
                }

                catch (Exception ex)
                {
                    Global.Log(ex);
                }
            }
            set.Tables.Add(dataTable);
            return set.GetXml();
        }
        #endregion

        #region Verify clean time
        /// <summary>
        /// 验证时间数据
        /// </summary>
        /// <param name="strBegin">开始时间</param>
        /// <param name="strEnd">结束时间</param>
        /// <returns>时间段</returns>
        string VerifyData(string strEnd, string strBegin)
        {
            string result = "00:00:00";
            try
            {
                DateTime begin = Convert.ToDateTime(strBegin);
                DateTime end = Convert.ToDateTime(strEnd);
                result = (end - begin).ToString();
            }
            catch (Exception ex)
            {
                Global.Log(ex);
            }
            return result;
        }
        #endregion

        #region DataTable struct convert to xml
        /// <summary>
        /// 创建新的DataTable 转化成XML
        /// </summary>
        /// <param name="flag"></param>
        /// <returns></returns>
        DataTable CreateNewDataTable(string flag)
        {
            DataTable temp = new DataTable();
            DataColumn endoscopeSN = new DataColumn();
            endoscopeSN.ColumnName = "endoscopeSN";
            temp.Columns.Add(endoscopeSN);

            DataColumn washerRealName = new DataColumn();
            washerRealName.ColumnName = "washerRealName";
            temp.Columns.Add(washerRealName);

            DataColumn washDate = new DataColumn();
            washDate.ColumnName = "washDate";
            temp.Columns.Add(washDate);

            DataColumn washTotalTime = new DataColumn();
            washTotalTime.ColumnName = "washTotalTime";
            temp.Columns.Add(washTotalTime);

            DataColumn washBeginTime = new DataColumn();
            washBeginTime.ColumnName = "washBeginTime";
            temp.Columns.Add(washBeginTime);

            DataColumn washEndTime = new DataColumn();
            washEndTime.ColumnName = "washEndTime";
            temp.Columns.Add(washEndTime);

            DataColumn autoCleanNo = new DataColumn();
            autoCleanNo.ColumnName = "autoCleanNo";
            temp.Columns.Add(autoCleanNo);

            if (flag == "1")
            {
                DataColumn brushWashTime = new DataColumn();
                brushWashTime.ColumnName = "brushWashTime";
                temp.Columns.Add(brushWashTime);

                DataColumn firstWashTime = new DataColumn();
                firstWashTime.ColumnName = "firstWashTime";
                temp.Columns.Add(firstWashTime);

                DataColumn enzymeWashTime = new DataColumn();
                enzymeWashTime.ColumnName = "enzymeWashTime";
                temp.Columns.Add(enzymeWashTime);

                DataColumn cleanOutWashTime = new DataColumn();
                cleanOutWashTime.ColumnName = "cleanOutWashTime";
                temp.Columns.Add(cleanOutWashTime);

                DataColumn dipInWashTime = new DataColumn();
                dipInWashTime.ColumnName = "dipInWashTime";
                temp.Columns.Add(dipInWashTime);

                DataColumn lastWashTime = new DataColumn();
                lastWashTime.ColumnName = "lastWashTime";
                temp.Columns.Add(lastWashTime);
                temp.TableName = "FirstWash";
            }
            else
            {
                DataColumn dipInWashSecTime = new DataColumn();
                dipInWashSecTime.ColumnName = "dipInWashSecTime";
                temp.Columns.Add(dipInWashSecTime);

                DataColumn lastWashSecTime = new DataColumn();
                lastWashSecTime.ColumnName = "lastWashSecTime";
                temp.Columns.Add(lastWashSecTime);
                temp.TableName = "SecondWash";
            }
            DataColumn wareNo = new DataColumn();
            wareNo.ColumnName = "wareNo";
            temp.Columns.Add(wareNo);

            DataColumn doctorName = new DataColumn();
            doctorName.ColumnName = "doctorName";
            temp.Columns.Add(doctorName);


            DataColumn patientNo = new DataColumn();
            patientNo.ColumnName = "patientNo";
            temp.Columns.Add(patientNo);

            DataColumn prePatientNo = new DataColumn();
            prePatientNo.ColumnName = "prePatientNo";
            temp.Columns.Add(prePatientNo);

            DataColumn qualified = new DataColumn();
            qualified.ColumnName = "qualified";
            temp.Columns.Add(qualified);

            DataColumn nurseNo = new DataColumn();
            nurseNo.ColumnName = "nurseNo";
            temp.Columns.Add(nurseNo);

            return temp;
        }
        #endregion

        #region  Get clean result by condition
        /// <summary>
        /// 根据搜索条件获取内容
        /// </summary>
        /// <param name="condition">条件</param>
        /// <param name="value">值</param>
        /// <returns>查询结果集</returns>
        public string GetSearchResultByName(string condition, string value)
        {
            SqlConnection con = null;
            DataTable dataTable1 = null;
            DataTable dataTable2 = null;
            DataSet set = null;
            using (con = new SqlConnection(Global.ConnStr))
            {
                try
                {
                    con.Open();
                    SqlCommand cmd = new SqlCommand();
                    dataTable1 = CreateNewDataTable("1");
                    dataTable2 = CreateNewDataTable("2");
                    cmd.Connection = con;
                    cmd.CommandText = SQL.SearchResult(condition, value);
                    set = new DataSet();
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            try
                            {
                                if ((Convert.IsDBNull(reader["cleanType"]) == true ? "" : reader["cleanType"].ToString()) == "1")
                                {
                                    DataRow row1 = dataTable1.NewRow();
                                    row1[0] = Convert.IsDBNull(reader["endoscopeSN"]) == true ? "" : reader["endoscopeSN"].ToString();
                                    row1[1] = Convert.IsDBNull(reader["washerRealName"]) == true ? "" : reader["washerRealName"].ToString();
                                    row1[2] = Convert.IsDBNull(reader["washDate"]) == true ? "" : Convert.ToDateTime(reader["washDate"].ToString()).ToLongDateString();
                                    row1[3] = Convert.IsDBNull(reader["washTotalTime"]) == true ? "" : reader["washTotalTime"].ToString();
                                    row1[4] = Convert.IsDBNull(reader["washBeginTime"]) == true ? "" : reader["washBeginTime"].ToString();
                                    row1[5] = Convert.IsDBNull(reader["washEndTime"]) == true ? "" : reader["washEndTime"].ToString();
                                    row1[6] = Convert.IsDBNull(reader["autoCleanNo"]) == true ? "" : reader["autoCleanNo"].ToString();
                                    row1[7] = Convert.IsDBNull(reader["brushWashBegin"]) == true ? "" : VerifyData(reader["brushWashEnd"].ToString(), reader["brushWashBegin"].ToString());
                                    row1[8] = Convert.IsDBNull(reader["firstWashEnd"]) == true ? "" : VerifyData(reader["firstWashEnd"].ToString(), reader["firstWashBegin"].ToString());
                                    row1[9] = Convert.IsDBNull(reader["enzymeWashEnd"]) == true ? "" : VerifyData(reader["enzymeWashEnd"].ToString(), reader["enzymeWashBegin"].ToString());
                                    row1[10] = Convert.IsDBNull(reader["cleanOutWashEnd"]) == true ? "" : VerifyData(reader["cleanOutWashEnd"].ToString(), reader["cleanOutWashBegin"].ToString());
                                    row1[11] = Convert.IsDBNull(reader["dipInWashEnd"]) == true ? "" : VerifyData(reader["dipInWashEnd"].ToString(), reader["dipInWashBegin"].ToString());
                                    row1[12] = Convert.IsDBNull(reader["lastWashEnd"]) == true ? "" : VerifyData(reader["lastWashEnd"].ToString(), reader["lastWashBegin"].ToString());
                                    row1[13] = Convert.IsDBNull(reader["wareNo"]) == true ? "" : reader["wareNo"].ToString();
                                    row1[14] = Convert.IsDBNull(reader["doctorName"]) == true ? "" : reader["doctorName"].ToString();
                                    row1[15] = Convert.IsDBNull(reader["patientNo"]) == true ? "" : reader["patientNo"].ToString();
                                    row1[16] = Convert.IsDBNull(reader["prePatientNo"]) == true ? "" : reader["prePatientNo"].ToString();
                                    row1[17] = Convert.IsDBNull(reader["qualified"]) == true ? "" : reader["qualified"].ToString();
                                    row1[18] = Convert.IsDBNull(reader["nurseNo"]) == true ? "" : reader["nurseNo"].ToString();
                                    dataTable1.Rows.Add(row1);
                                }
                                else
                                {
                                    DataRow row2 = dataTable2.NewRow();
                                    row2[0] = Convert.IsDBNull(reader["endoscopeSN"]) == true ? "" : reader["endoscopeSN"].ToString();
                                    row2[1] = Convert.IsDBNull(reader["washerRealName"]) == true ? "" : reader["washerRealName"].ToString();
                                    row2[2] = Convert.IsDBNull(reader["washDate"]) == true ? "" : Convert.ToDateTime(reader["washDate"].ToString()).ToLongDateString();
                                    row2[3] = Convert.IsDBNull(reader["washTotalTime"]) == true ? "" : reader["washTotalTime"].ToString();
                                    row2[4] = Convert.IsDBNull(reader["washBeginTime"]) == true ? "" : reader["washBeginTime"].ToString();
                                    row2[5] = Convert.IsDBNull(reader["washEndTime"]) == true ? "" : reader["washEndTime"].ToString();
                                    row2[6] = Convert.IsDBNull(reader["autoCleanNo"]) == true ? "" : reader["autoCleanNo"].ToString();
                                    row2[7] = Convert.IsDBNull(reader["dipInWashSecEnd"]) == true ? "" : VerifyData(reader["dipInWashSecEnd"].ToString(), reader["dipInWashSecBegin"].ToString());
                                    row2[8] = Convert.IsDBNull(reader["lastWashSecEnd"]) == true ? "" : VerifyData(reader["lastWashSecEnd"].ToString(), reader["lastWashSecBegin"].ToString());
                                    row2[9] = Convert.IsDBNull(reader["wareNo"]) == true ? "" : reader["wareNo"].ToString();
                                    row2[10] = Convert.IsDBNull(reader["doctorName"]) == true ? "" : reader["doctorName"].ToString();
                                    row2[11] = Convert.IsDBNull(reader["patientNo"]) == true ? "" : reader["patientNo"].ToString();
                                    row2[12] = Convert.IsDBNull(reader["prePatientNo"]) == true ? "" : reader["prePatientNo"].ToString();
                                    row2[13] = Convert.IsDBNull(reader["qualified"]) == true ? "" : reader["qualified"].ToString();
                                    row2[14] = Convert.IsDBNull(reader["nurseNo"]) == true ? "" : reader["nurseNo"].ToString();
                                    dataTable2.Rows.Add(row2);
                                }
                            }
                            catch (Exception ex)
                            {
                                Global.Log(ex);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Global.Log(ex);
                }
            }
            set.Tables.Add(dataTable1);
            set.Tables.Add(dataTable2);
            return set.GetXml();
        }
        #endregion

        #region Update the view of third-party software
        public string UpdateView(string dateTime = "")
        {
            string temp = string.Format("select * from v_es_qx  where datediff(day,study_dttm,getdate())>0");
            int num = 0;
            StringBuilder builder = new StringBuilder();
            try
            {
                using (SqlConnection con = new SqlConnection(@"Data Source=10.1.6.21\sql;Initial Catalog=OPACS_ES;Persist Security Info=True;User ID=sa;Password=opacs"))
                {
                    con.Open();
                    Global.Log(temp);
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = con;
                    cmd.CommandText = temp;
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            try
                            {
                                builder.Append(Convert.IsDBNull(reader["study_examext1"]) == true ? "" : reader["study_examext1"].ToString());
                                builder.Append(",");
                                builder.Append(Convert.IsDBNull(reader["patient_name"]) == true ? "" : reader["patient_name"].ToString());
                                builder.Append(",");
                                builder.Append(Convert.IsDBNull(reader["login_ordinal"]) == true ? "" : reader["login_ordinal"].ToString());
                                builder.Append(",");
                                builder.Append(Convert.IsDBNull(reader["report_transcriber"]) == true ? "" : reader["report_transcriber"].ToString());
                                builder.Append(",");
                                builder.Append(Convert.IsDBNull(reader["report_diagnostician"]) == true ? "" : reader["report_diagnostician"].ToString());
                                num += this.InsertView(builder.ToString());
                                builder.Clear();
                            }
                            catch (Exception ex)
                            {
                                Global.Log(ex);
                                builder.Clear();
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Global.Log(ex);
            }
            return num.ToString();
        }
        #endregion

        #region  Insert or update tables by DataBase views

        /// <summary>
        /// 插入、更新表
        /// </summary>
        /// <param name="temp"></param>
        /// <returns></returns>
        private int InsertView(string temp)
        {
            string[] strs = temp.Split(',');
            Global.Log(temp);
            using (SqlConnection con = new SqlConnection(Global.ConnStr))
            {
                try
                {
                    con.Open();
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = con;
                    cmd.CommandText = string.Format("update endoscopeArm set patientNo='{1}', wareNo='{2}',nurseNo='{3}',doctorName='{4}' where recordId='{0}'", strs[0], strs[1], strs[2], strs[3], strs[4]);
                    int i = cmd.ExecuteNonQuery();
                    Global.Log(cmd.CommandText);
                    return i;
                }
                catch (Exception ex)
                {
                    Global.Log(ex);
                }
            }
            return 0;
        }
        #endregion

        /// <summary>
        /// 根据用户条件进行查询
        /// </summary>
        /// <param name="condition"></param>
        /// <returns></returns>
        public string GetSearchResultByName(string condition)
        {
            return string.Empty;
        }

        /// <summary>
        /// 二次清洗
        /// </summary>
        /// <returns>二次清洗结果</returns>
        public string SearchSecWash()
        {
            return string.Empty;
        }
    }
}

